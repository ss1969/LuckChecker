/* 搜索目录 */
Folder = "D:\Projects\SyncNet"
Folder = "."

/* 搜索文件类型，支持通配符和文件全名 */
//Files = 111.txt
Files = *.c , *.h , *.cpp , *.hpp

/* 排除文件类型，不支持通配符 */
ExcludeFile = HM_Utils.h , HM_Debug.h, HM_Utils.c , HM_Debug.cpp

/* 如果替换词前面有这些，那么就跳过替换（注释、宏定义、ASSERT） */
ExcludeHeading = "#include" ,  "//" , "_ASSERT", "_TRACE", "&operator"

/* 如果替换词在以下列表中，那么就跳过替换 */
ExcludePattern = "= delete;" , "= default;"

/* 检查规则 */
Check = bool * m_b
Check = BOOL * m_b

/* 替换规则 */
Swap = new / HM_NEW , true / HM_TRUE , false / HM_FALSE, bool / HM_BOOL , void / HM_VOID , delete / HM_DELETE, nullptr / HM_NULL
Swap = TRUE / HM_TRUE , FALSE / HM_FALSE, BOOL / HM_BOOL , VOID / HM_VOID , DELETE / HM_DELETE, null / HM_NULL
Swap = EnterCriticalSection / HMEnterCriticalSection, LeaveCriticalSection / HMLeaveCriticalSection, InitializeCriticalSection / HMInitializeCriticalSection, DeleteCriticalSection / HMDeleteCriticalSection
Swap = int8_t   / HM_INT8
Swap = int16_t  / HM_INT16
Swap = int32_t  / HM_INT32
Swap = int64_t  / HM_INT64
Swap = uint8_t  / HM_UINT8
Swap = uint16_t / HM_UINT16
Swap = uint32_t / HM_UINT32
Swap = uint64_t / HM_UINT64
Swap = INT8 / HM_INT8
Swap = INT16 / HM_INT16
Swap = INT32 / HM_INT32
Swap = INT64 / HM_INT64
Swap = UINT8 / HM_UINT8
Swap = UINT16 / HM_UINT16
Swap = UINT32 / HM_UINT32
Swap = UINT64 / HM_UINT64

Swap = htons / HM_UINT16_TO_BE
Swap = htonl / HM_UINT32_TO_BE
Swap = htonll / HM_UINT64_TO_BE
Swap = ntohs / HM_BE_TO_UINT16
Swap = ntohl / HM_BE_TO_UINT32
Swap = ntohll / HM_BE_TO_UINT64

Swap = socket / HMOpenSocket
Swap = getsockname / HMGetSocketName
Swap = getpeername / HMGetPeerName
Swap = send / HMSendSocket
Swap = sendto / HMSendToSocket
Swap = recv / HMRecvSocket
Swap = recvfrom / HMRecvFromSocket
Swap = bind / HMBindSocket
Swap = listen / HMListenSocket
Swap = connect / HMConnectSocket
Swap = accept / HMAcceptSocket
Swap = shutdown / HMShutdownSocket
Swap = getsockopt / HMGetSocketOpt
Swap = setsockopt / HMSetSocketOpt
Swap = closesocket / HMCloseSocket
Swap = WSAGetLastError() / HMSocketErrorNo
Swap = WSAEINTR / HM_SOCKET_INTR
Swap = WSAETIMEDOUT / HM_SOCKET_TIMEOUT
Swap = INVALID_SOCKET / HM_INVALID_SOCKET
Swap = SOCKET_ERROR / HM_SOCKET_ERROR
Swap = SD_BOTH / HM_SD_BOTH
Swap = SD_RECEIVE / HM_SD_RECEIVE
Swap = SD_SEND / HM_SD_SEND
Swap = SOCKET / HM_HSOCKET

#define HM_TARGET_64
#define HM_VC
#define __cplusplus
#define HM_WINDOWS

Swap = {
   // typedef unsigned char        HM_BYTE;      /* Size should be 1 byte. */
    typedef signed char          HM_INT8;       /* Size should be 1 bytes. */
    typedef unsigned char        HM_UINT8;      /* Size should be 1 bytes. */
    typedef signed short         HM_INT16;      /* Size should be 2 bytes. */
    typedef unsigned short       HM_UINT16;     /* Size should be 2 bytes. */
    #ifdef HM_TARGET_64
        #   if defined( HM_VC )     /* Visubal C++ */
        typedef signed long          HM_INT32;      /* Size should be 4 bytes. */
        typedef unsigned long        HM_UINT32;     /* Size should be 4 bytes. */
        #   elif defined( HM_GCC )  /* GCC */
        typedef signed int           HM_INT32;      /* Size should be 4 bytes. */
        typedef unsigned int         HM_UINT32;     /* Size should be 4 bytes. */
        #   endif
    #else
        typedef signed long          HM_INT32;      /* Size should be 4 bytes. */
        typedef unsigned long        HM_UINT32;     /* Size should be 4 bytes. */
    #endif
    typedef signed long long     HM_INT64;      /* Size should be 8 bytes. */
    typedef unsigned long long   HM_UINT64;     /* Size should be 8 bytes. */
    typedef signed int           HM_INT;        /* Size depends on compiler. */
    typedef unsigned int         HM_UINT;       /* Size depends on compiler. */

    typedef char                 HM_CHAR;       /* Size should be 1 byte. */
    #if defined( __cplusplus )
        typedef wchar_t              HM_WCHAR;      /* Size is 2 bytes for Windows, 4 bytes for unix-like systems. */
        typedef char16_t             HM_CHAR16;     /* Size should be 2 bytes. */
        typedef char32_t             HM_CHAR32;     /* Size should be 4 bytes. */
    #endif
    typedef float                HM_FLOAT;      /* Size should be 4 bytes. */
    typedef double               HM_FLOAT64;    /* Size should be 8 bytes. */
}